// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/23/2016 19:51:53"
                                                                                
// Verilog Test Bench template for design : sha_256_v2
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module sha_256_v2_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg uart_rx;
// wires                                               
wire clk_h_div;
wire start_led;
wire uart_tx;
//
integer i;
integer j;
integer k;
integer m;
//                                                
reg [7:0] 	host_break_vec = 8'h31;
reg [7:0]	wr_block  = 8'h38;
reg [7:0]	get_signature	=		8'h49;// == I
reg [7:0]	get_status	   =     8'h53;// == S
reg [7:0]	get_current_nonce	=	8'h6e;// == n
reg [7:0]	read_ubuf		=		8'h52;//	 == R
reg [7:0]	start          =     8'h32;//
reg [7:0]	stop           =     8'h34;//
reg [7:0]	set_target		=		8'h54;// == T
reg [7:0]	set_nonce		=		8'h4E;// == N
reg [7:0]	set_timestamp	=		8'h57;// == W
reg [7:0]	set_clk			=		8'h43;// == C
reg [7:0]	command 			= 		8'h0;
reg [7:0]	data				=		8'h0;
//target - two most significat DWORDs == 32'h0
reg [255:0] target = 256'hc68ef0b049f8d1a3cf8e499481993a99cf8279f543c466db0000000000000000; 
reg	[7:0] target_byte [31:0];// 
reg [383:0]	block = 384'h4170CACD2404388EF32D36D60FA88086F162F46EAF7AF910AD7AEC58F1B85791c605232b5c8c0553535f0119ccad1657;
reg [7:0]	block_byte [47:0];
reg [31:0]  nonce = 32'hccad1657;
reg [7:0]   nonce_byte [3:0];
reg [31:0]  time_stamp = 32'h5c8c0553;
reg [7:0]   time_stamp_byte [3:0];

//                                                     
sha_256_v2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_h_div(clk_h_div),
	.start_led(start_led),
	.uart_rx(uart_rx),
	.uart_tx(uart_tx)
);
//
parameter period = 20000;//clk_in = 50MGz
parameter CLKS_PER_BIT = 54;//for uart model 921600b/s & clk_in = 50MGz
//
initial
begin
// target init revers
/*
target_byte[23] = 8'hc6;  target_byte[22] = 8'h8e;  target_byte[21] = 8'hf0;   target_byte[20] = 8'hb0;
target_byte[19] = 8'h49;  target_byte[18] = 8'hf8;  target_byte[17] = 8'hd1;   target_byte[16] = 8'ha3;
target_byte[15] = 8'hcf;  target_byte[14] = 8'h8e;  target_byte[13] = 8'h49;   target_byte[12] = 8'h94;
target_byte[11] = 8'h81;  target_byte[10] = 8'h99;  target_byte[9]  = 8'h3a;   target_byte[8]  = 8'h99;
target_byte[7]  = 8'hcf;  target_byte[6]  = 8'h82;  target_byte[5]  = 8'h79;   target_byte[4]  = 8'hf5;
target_byte[3]  = 8'h43;  target_byte[2]  = 8'hc4;  target_byte[1]  = 8'h66;   target_byte[0]  = 8'hdb;
*/
//
// target init 
target_byte[0]  = 8'hc6;  target_byte[1]  = 8'h8e;  target_byte[2]  = 8'hf0;   target_byte[3]  = 8'hb0;
target_byte[4]  = 8'h49;  target_byte[5]  = 8'hf8;  target_byte[6]  = 8'hd1;   target_byte[7]  = 8'ha3;
target_byte[8]  = 8'hcf;  target_byte[9]  = 8'h8e;  target_byte[10] = 8'h49;   target_byte[11] = 8'h94;
target_byte[12] = 8'h81;  target_byte[13] = 8'h99;  target_byte[14] = 8'h3a;   target_byte[15] = 8'h99;
target_byte[16] = 8'hcf;  target_byte[17] = 8'h82;  target_byte[18] = 8'h79;   target_byte[19] = 8'hf5;
target_byte[20] = 8'h43;  target_byte[21] = 8'hc4;  target_byte[22] = 8'h66;   target_byte[23] = 8'hdb;
target_byte[24] = 8'h00;  target_byte[25] = 8'h00;  target_byte[26] = 8'h00;   target_byte[27] = 8'h00;
target_byte[28] = 8'h00;  target_byte[29] = 8'h00;  target_byte[30] = 8'h00;   target_byte[31] = 8'h00;
//
//
// target 11_05_2017
target_byte[0]  = 8'hc6;  target_byte[1]  = 8'h8e;  target_byte[2]  = 8'hf0;   target_byte[3]  = 8'hb0;
target_byte[4]  = 8'h49;  target_byte[5]  = 8'hf8;  target_byte[6]  = 8'hd1;   target_byte[7]  = 8'ha3;
target_byte[8]  = 8'hcf;  target_byte[9]  = 8'h8e;  target_byte[10] = 8'h49;   target_byte[11] = 8'h94;
target_byte[12] = 8'h81;  target_byte[13] = 8'h99;  target_byte[14] = 8'h3a;   target_byte[15] = 8'h99;
target_byte[16] = 8'hcf;  target_byte[17] = 8'h82;  target_byte[18] = 8'h79;   target_byte[19] = 8'hf5;
target_byte[20] = 8'h43;  target_byte[21] = 8'hc4;  target_byte[22] = 8'h66;   target_byte[23] = 8'hdb;
target_byte[24] = 8'hff;  target_byte[25] = 8'hff;  target_byte[26] = 8'hff;   target_byte[27] = 8'hff;
target_byte[28] = 8'h0f;  target_byte[29] = 8'h00;  target_byte[30] = 8'h00;   target_byte[31] = 8'h00;




// block init revers
/*
block_byte[47] = 8'h41;   block_byte[46] = 8'h70;   block_byte[45] = 8'hCA;   block_byte[44] = 8'hCD;
block_byte[43] = 8'h24;   block_byte[42] = 8'h04;   block_byte[41] = 8'h38;   block_byte[40] = 8'h8E;
block_byte[39] = 8'hF3;   block_byte[38] = 8'h2D;   block_byte[37] = 8'h36;   block_byte[36] = 8'hD6;
block_byte[35] = 8'h0F;   block_byte[34] = 8'hA8;   block_byte[33] = 8'h80;   block_byte[32] = 8'h86;
block_byte[31] = 8'hF1;   block_byte[30] = 8'h62;   block_byte[29] = 8'hF4;   block_byte[28] = 8'h6E;
block_byte[27] = 8'hAF;   block_byte[26] = 8'h7A;   block_byte[25] = 8'hF9;   block_byte[24] = 8'h10;
block_byte[23] = 8'hAD;   block_byte[22] = 8'h7A;   block_byte[21] = 8'hEC;   block_byte[20] = 8'h58;
block_byte[19] = 8'hF1;   block_byte[18] = 8'hB8;   block_byte[17] = 8'h57;   block_byte[16] = 8'h91;
block_byte[15] = 8'hc6;   block_byte[14] = 8'h05;   block_byte[13] = 8'h23;   block_byte[12] = 8'h2b;
block_byte[11] = 8'h5c;   block_byte[10] = 8'h8c;   block_byte[9]  = 8'h05;   block_byte[8]  = 8'h53;
block_byte[7]  = 8'h53;   block_byte[6]  = 8'h5f;   block_byte[5]  = 8'h01;   block_byte[4]  = 8'h19;
block_byte[3]  = 8'hcc;   block_byte[2]  = 8'had;   block_byte[1]  = 8'h16;   block_byte[0]  = 8'h57;*/
//
// block init 
block_byte[0]  = 8'h41;   block_byte[1]  = 8'h70;   block_byte[2]  = 8'hCA;   block_byte[3]  = 8'hCD;
block_byte[4]  = 8'h24;   block_byte[5]  = 8'h04;   block_byte[6]  = 8'h38;   block_byte[7]  = 8'h8E;
block_byte[8]  = 8'hF3;   block_byte[9]  = 8'h2D;   block_byte[10] = 8'h36;   block_byte[11] = 8'hD6;
block_byte[12] = 8'h0F;   block_byte[13] = 8'hA8;   block_byte[14] = 8'h80;   block_byte[15] = 8'h86;
block_byte[16] = 8'hF1;   block_byte[17] = 8'h62;   block_byte[18] = 8'hF4;   block_byte[19] = 8'h6E;
block_byte[20] = 8'hAF;   block_byte[21] = 8'h7A;   block_byte[22] = 8'hF9;   block_byte[23] = 8'h10;
block_byte[24] = 8'hAD;   block_byte[25] = 8'h7A;   block_byte[26] = 8'hEC;   block_byte[27] = 8'h58;
block_byte[28] = 8'hF1;   block_byte[29] = 8'hB8;   block_byte[30] = 8'h57;   block_byte[31] = 8'h91;
block_byte[32] = 8'hc6;   block_byte[33] = 8'h05;   block_byte[34] = 8'h23;   block_byte[35] = 8'h2b;
block_byte[36] = 8'h5c;   block_byte[37] = 8'h8c;   block_byte[38] = 8'h05;   block_byte[39] = 8'h53;
block_byte[40] = 8'h53;   block_byte[41] = 8'h5f;   block_byte[42] = 8'h01;   block_byte[43] = 8'h19;
//block_byte[44] = 8'hcc;   block_byte[45] = 8'had;   block_byte[46] = 8'h16;   block_byte[47] = 8'h57;// success story
block_byte[44] = 8'h00;   block_byte[45] = 8'h00;   block_byte[46] = 8'h00;   block_byte[47] = 8'h01;// unsuccess story
//
/*// block init 11_05_2017
block_byte[0]  = 8'h41;   block_byte[1]  = 8'h70;   block_byte[2]  = 8'hCA;   block_byte[3]  = 8'hCD;
block_byte[4]  = 8'h24;   block_byte[5]  = 8'h04;   block_byte[6]  = 8'h38;   block_byte[7]  = 8'h8E;
block_byte[8]  = 8'hF3;   block_byte[9]  = 8'h2D;   block_byte[10] = 8'h36;   block_byte[11] = 8'hD6;
block_byte[12] = 8'h0F;   block_byte[13] = 8'hA8;   block_byte[14] = 8'h80;   block_byte[15] = 8'h86;
block_byte[16] = 8'hF1;   block_byte[17] = 8'h62;   block_byte[18] = 8'hF4;   block_byte[19] = 8'h6E;
block_byte[20] = 8'hAF;   block_byte[21] = 8'h7A;   block_byte[22] = 8'hF9;   block_byte[23] = 8'h10;
block_byte[24] = 8'hAD;   block_byte[25] = 8'h7A;   block_byte[26] = 8'hEC;   block_byte[27] = 8'h58;
block_byte[28] = 8'hF1;   block_byte[29] = 8'hB8;   block_byte[30] = 8'h57;   block_byte[31] = 8'h91;
block_byte[32] = 8'hc6;   block_byte[33] = 8'h05;   block_byte[34] = 8'h23;   block_byte[35] = 8'h2b;
block_byte[36] = 8'h5c;   block_byte[37] = 8'h8c;   block_byte[38] = 8'h05;   block_byte[39] = 8'h53;
block_byte[40] = 8'h53;   block_byte[41] = 8'h5f;   block_byte[42] = 8'h01;   block_byte[43] = 8'h19;
block_byte[44] = 8'hcc;   block_byte[45] = 8'had;   block_byte[46] = 8'h16;   block_byte[47] = 8'h57;//*/






// nonce init
nonce_byte[3] = 8'hcc; nonce_byte[2] = 8'had; nonce_byte[1] = 8'h16; nonce_byte[0] = 8'h57;  
//
// time_stamp init
time_stamp_byte[3] = 8'h5c; time_stamp_byte[2] = 8'h8c; time_stamp_byte[1] = 8'h05; time_stamp_byte[0] = 8'h53;
end
//
initial                                                
begin                                                                      
clk = 1'b0;
uart_rx = 1'b1;
//
									command = set_clk;// it's any command
//
@(posedge clk); // wait till the posedge of clk_50 then continue
#(period*5)
//
//command host_break
uart_rx	=  1'b0;
#(period*CLKS_PER_BIT);//start bit
for(i = 0; i < 8; i = i+1)
begin
uart_rx	=  host_break_vec[i];
#(period*CLKS_PER_BIT);
end	
uart_rx = 1'b1;
#(period*CLKS_PER_BIT);//stop bit
//
//test couple commands start, stop here
/*	
//command start
							uart_rx	=  1'b0;
							#(period*CLKS_PER_BIT);//start bit
							for(i = 0; i < 8; i = i+1)
							begin
							uart_rx	=  start[i];
							#(period*CLKS_PER_BIT);
							end	
							uart_rx = 1'b1;
							#(period*CLKS_PER_BIT);//stop bit
							//          

		//command stop
							uart_rx	=  1'b0;
							#(period*CLKS_PER_BIT);//start bit
							for(i = 0; i < 8; i = i+1)
							begin
							uart_rx	=  stop[i];//
							#(period*CLKS_PER_BIT);
							end	
							uart_rx = 1'b1;
							#(period*CLKS_PER_BIT);//stop bit
							//  
							*/
											/*
													//test any command, exept start, stop, there
													//command any
																			uart_rx	=  1'b0;
																			#(period*CLKS_PER_BIT);//start bit
																			for(i = 0; i < 8; i = i+1)
																			begin
																			uart_rx	=  command[i];//
																			#(period*CLKS_PER_BIT);
																			end	
																			uart_rx = 1'b1;
																			#(period*CLKS_PER_BIT);//stop bit
																			// 
																			
																//data **** set_clk
																for(j = 0; j < 1; j = j+1)//<48 - wr_block, <24 - set_target, <4 - set_nonce, <4 - set_timestamp, <1 - set_clk
																			begin
																				data = 8'h35;//data + 1'b1
																				uart_rx	=  1'b0;
																				#(period*CLKS_PER_BIT);//start bit
																					for(i = 0; i < 8; i = i+1)
																					begin
																					uart_rx	=  data[i];//
																					#(period*CLKS_PER_BIT);
																					end	
																				uart_rx = 1'b1;
																				#(period*CLKS_PER_BIT);//stop bit
																			end
																			//		
																			*/
																			
// test: load target, block, start hash, get hash complete																			
//
//set_target
//		
																
uart_rx	=  1'b0;
			#(period*CLKS_PER_BIT);//start bit
			for(i = 0; i < 8; i = i+1)
			begin
			uart_rx	=  set_target[i];//
			#(period*CLKS_PER_BIT);
			end	
			uart_rx = 1'b1;
			#(period*CLKS_PER_BIT);//stop bit
			// 
//data
for(j = 0; j < 32; j = j+1)//
			begin
				data = target_byte[j];//
				uart_rx	=  1'b0;
				#(period*CLKS_PER_BIT);//start bit
					for(i = 0; i < 8; i = i+1)
					begin
					uart_rx	=  data[i];//
					#(period*CLKS_PER_BIT);
					end	
				uart_rx = 1'b1;
				#(period*CLKS_PER_BIT);//stop bit
			end																									
// 
//

#(period * CLKS_PER_BIT*2)
								//wr_block
								//
								uart_rx	=  1'b0;
											#(period*CLKS_PER_BIT);//start bit
											for(i = 0; i < 8; i = i+1)
											begin
											uart_rx	=  wr_block[i];//
											#(period*CLKS_PER_BIT);
											end	
											uart_rx = 1'b1;
											#(period*CLKS_PER_BIT);//stop bit
											// 
								//data
								for(j = 0; j < 48; j = j+1)//
											begin
												data = block_byte[j];//
												uart_rx	=  1'b0;
												#(period*CLKS_PER_BIT);//start bit
													for(i = 0; i < 8; i = i+1)
													begin
													uart_rx	=  data[i];//
													#(period*CLKS_PER_BIT);
													end	
												uart_rx = 1'b1;
												#(period*CLKS_PER_BIT);//stop bit
											end
//

#(period * CLKS_PER_BIT*2)
// start hash
//command start
							uart_rx	=  1'b0;
							#(period*CLKS_PER_BIT);//start bit
							for(i = 0; i < 8; i = i+1)
							begin
							uart_rx	=  start[i];
							#(period*CLKS_PER_BIT);
							end	
							uart_rx = 1'b1;
							#(period*CLKS_PER_BIT);//stop bit
							//          					
 
//

#(period * CLKS_PER_BIT*5)

uart_rx	=  1'b0;
							#(period*CLKS_PER_BIT);//start bit
							for(i = 0; i < 8; i = i+1)
							begin
							uart_rx	=  get_current_nonce[i];
							#(period*CLKS_PER_BIT);
							end	
							uart_rx = 1'b1;
							#(period*CLKS_PER_BIT);//stop bit
							//          					




end
 always  
 #(period/2) clk = ~clk; 
 

                                                                                       
endmodule
///
